package mocks

import mock "github.com/stretchr/testify/mock"
import mqtt "github.com/eclipse/paho.mqtt.golang"

// Generated do not edit

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Connect provides a mock function with given fields:
func (_m *Client) Connect() mqtt.Token {
	ret := _m.Called()

	var r0 mqtt.Token
	if rf, ok := ret.Get(0).(func() mqtt.Token); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mqtt.Token)
		}
	}

	return r0
}

// Disconnect provides a mock function with given fields: _a0
func (_m *Client) Disconnect(_a0 uint) {
	_m.Called(_a0)
}

// IsConnected provides a mock function with given fields:
func (_m *Client) IsConnected() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Publish provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Client) Publish(_a0 string, _a1 byte, _a2 bool, _a3 interface{}) mqtt.Token {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 mqtt.Token
	if rf, ok := ret.Get(0).(func(string, byte, bool, interface{}) mqtt.Token); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mqtt.Token)
		}
	}

	return r0
}

// Subscribe provides a mock function with given fields: _a0, _a1, _a2
func (_m *Client) Subscribe(_a0 string, _a1 byte, _a2 mqtt.MessageHandler) mqtt.Token {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 mqtt.Token
	if rf, ok := ret.Get(0).(func(string, byte, mqtt.MessageHandler) mqtt.Token); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mqtt.Token)
		}
	}

	return r0
}

// SubscribeMultiple provides a mock function with given fields: _a0, _a1
func (_m *Client) SubscribeMultiple(_a0 map[string]byte, _a1 mqtt.MessageHandler) mqtt.Token {
	ret := _m.Called(_a0, _a1)

	var r0 mqtt.Token
	if rf, ok := ret.Get(0).(func(map[string]byte, mqtt.MessageHandler) mqtt.Token); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mqtt.Token)
		}
	}

	return r0
}

// Unsubscribe provides a mock function with given fields: _a0
func (_m *Client) Unsubscribe(_a0 ...string) mqtt.Token {
	ret := _m.Called(_a0)

	var r0 mqtt.Token
	if rf, ok := ret.Get(0).(func(...string) mqtt.Token); ok {
		r0 = rf(_a0...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mqtt.Token)
		}
	}

	return r0
}

var _ mqtt.Client = (*Client)(nil)
