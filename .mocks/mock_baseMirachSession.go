// +build unit
package main

import cron "github.com/robfig/cron"
import mock "github.com/stretchr/testify/mock"
import mqtt "github.com/eclipse/paho.mqtt.golang"

// Generated do not edit

// mockBaseMirachSession is an autogenerated mock type for the baseMirachSession type
type mockBaseMirachSession struct {
	mock.Mock
}

// configureLogging provides a mock function with given fields:
func (_m *mockBaseMirachSession) configureLogging() {
	_m.Called()
}

// getAsset provides a mock function with given fields: cust
func (_m *mockBaseMirachSession) getAsset(cust *Customer) *Asset {
	ret := _m.Called(cust)

	var r0 *Asset
	if rf, ok := ret.Get(0).(func(*Customer) *Asset); ok {
		r0 = rf(cust)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Asset)
		}
	}

	return r0
}

// getConfig provides a mock function with given fields:
func (_m *mockBaseMirachSession) getConfig() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// getConfigDirs provides a mock function with given fields:
func (_m *mockBaseMirachSession) getConfigDirs() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// getCustomer provides a mock function with given fields:
func (_m *mockBaseMirachSession) getCustomer() *Customer {
	ret := _m.Called()

	var r0 *Customer
	if rf, ok := ret.Get(0).(func() *Customer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Customer)
		}
	}

	return r0
}

// getSysConfDir provides a mock function with given fields:
func (_m *mockBaseMirachSession) getSysConfDir() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// getUserConfDir provides a mock function with given fields:
func (_m *mockBaseMirachSession) getUserConfDir() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// getVerbosity provides a mock function with given fields:
func (_m *mockBaseMirachSession) getVerbosity() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// handleCommands provides a mock function with given fields: asset
func (_m *mockBaseMirachSession) handleCommands(asset *Asset) {
	_m.Called(asset)
}

// handlePlugins provides a mock function with given fields: client, _a1
func (_m *mockBaseMirachSession) handlePlugins(client mqtt.Client, _a1 *cron.Cron) {
	_m.Called(client, _a1)
}

// initializeConfigAndLogging provides a mock function with given fields:
func (_m *mockBaseMirachSession) initializeConfigAndLogging() {
	_m.Called()
}

// setConfigDirs provides a mock function with given fields:
func (_m *mockBaseMirachSession) setConfigDirs() {
	_m.Called()
}

var _ baseMirachSession = (*mockBaseMirachSession)(nil)
